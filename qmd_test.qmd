---
title: "Thompson Sampling Example"
format: revealjs
jupyter: python3
---

## Introduction

This presentation demonstrates Python code execution using **Quarto + Reveal.js**.

---

## Thompson Sampling - Basic Code

```{python}
import numpy as np

# Simulated true probabilities
true_probs = [0.2, 0.5, 0.7]
np.random.seed(42)

# Thompson Sampling Implementation
n_arms = len(true_probs)
alpha = np.ones(n_arms)
beta = np.ones(n_arms)

T = 500
rewards = []

for t in range(T):
    sampled_theta = np.random.beta(alpha, beta)
    chosen_arm = np.argmax(sampled_theta)
    reward = np.random.binomial(1, true_probs[chosen_arm])
    alpha[chosen_arm] += reward
    beta[chosen_arm] += 1 - reward
    rewards.append(reward)

cumulative_reward = np.cumsum(rewards)
```

```{python}
import matplotlib.pyplot as plt

optimal_mean = max(true_probs)
regret = np.arange(1, T+1) * optimal_mean - cumulative_reward

plt.plot(regret)
plt.xlabel("Time")
plt.ylabel("Cumulative Regret")
plt.title("Thompson Sampling Regret Over Time")
plt.grid(True)
plt.show()
```


```{python}
import matplotlib.pyplot as plt

optimal_mean = max(true_probs)
regret = np.arange(1, T+1) * optimal_mean - cumulative_reward

plt.plot(regret)
plt.xlabel("Time")
plt.ylabel("Cumulative Regret")
plt.title("Thompson Sampling Regret Over Time")
plt.grid(True)
plt.show()
```